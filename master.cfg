#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2013 - 2019 Wind River Systems, Inc.
# File  : master.cfg
# Author: Lei Yang <Lei.Yang@windriver.com>
# Date  : 19.12.2019
# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *
from twisted.internet import defer

from buildbot.config import BuilderConfig
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.process.factory import BuildFactory
from buildbot.process.results import SUCCESS
from buildbot.util import kubeclientservice
from buildbot.worker import kubernetes

num_concurrent=10
#def masterConfig(num_concurrent, extra_steps=None):
extra_steps = None
if extra_steps is None:
    extra_steps = []
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/leiyang/buildbot-docker-example-config.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=30))


c['schedulers'] = [
    schedulers.ForceScheduler(name="force", builderNames=["testy"])
]
triggereables = []
for i in range(num_concurrent):
    c['schedulers'].append(
        schedulers.Triggerable(
            name="trigsched" + str(i), builderNames=["build"]))
    triggereables.append("trigsched" + str(i))

f = BuildFactory()
f.addStep(steps.ShellCommand(command='echo hello'))
f.addStep(
    steps.Trigger(
        schedulerNames=triggereables,
        waitForFinish=True,
        updateSourceStamp=True))
f.addStep(steps.ShellCommand(command='echo world'))
f2 = BuildFactory()
f2.addStep(steps.ShellCommand(command='echo ola'))
for step in extra_steps:
    f2.addStep(step)
c['builders'] = [
    BuilderConfig(name="testy", workernames=["kubernetes0"], factory=f),
    BuilderConfig(
        name="build",
        workernames=["kubernetes" + str(i) for i in range(num_concurrent)],
        factory=f2)
]
#masterFQDN = os.environ.get('masterFQDN')
#masterFQDN="128.224.153.91"
c['workers'] = [
    kubernetes.KubeLatentWorker(
        'kubernetes' + str(i),
        'buildbot/buildbot-worker',
	namespace="test",
        kube_config=kubeclientservice.KubeInClusterConfigLoader(),
        ) for i in range(num_concurrent)
]
print("dddddddddddddddddddddddddddddd")

kube_config=kubeclientservice.KubeInClusterConfigLoader()
kube_config.reconfigService()
data=kube_config.getConfig()
print(data)
# un comment for debugging what happens if things looks locked.
# c['www'] = {'port': 8080}
c['protocols'] = {"pb": {"port": "tcp:9989"}}

#return c

#c=masterConfig(10)



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Pyflakes"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

